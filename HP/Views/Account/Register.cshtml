@model HP.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_LayoutNoMenu.cshtml";
}

<h2>@ViewBag.Title</h2>

<script type="text/javascript">
    (function ($) {

        function activateChild() {
            var child = $(this);
            child
                .prop("disabled", false)
                .removeClass("disabled");
            if (child.autocomplete) {
                child.autocomplete("enable");
            }
        }

        function deactivateChild() {
            var child = $(this);
            child
                .prop("disabled", true)
                .val("")
                .addClass("disabled");
            if (child.autocomplete) {
                child.autocomplete("disable");
            }

            var subChild = child.data("cascade-child");
            if (subChild) {
                deactivateChild.call(subChild);
            }
        }

        function eventOverride(originalEvent) {
            var child = this;
            return function (event, ui) {
                var isChildActivate = child.prop("disabled") === false;
                if (!ui.item && isChildActivate) {
                    deactivateChild.call(child);
                } else if (ui.item && !isChildActivate) {
                    activateChild.call(child);
                }
                if (typeof originalEvent === "function") {
                    originalEvent.call(child, event, ui);
                }
            };
        }

        $.fn.cascade = function (child) {
            var parent = this;
            child = $(child);

            if (parent.autocomplete) {
                var originalChange = parent.autocomplete("option", "change");
                var originalSelect = parent.autocomplete("option", "select");
                parent.data("cascade-child", child);
                parent.autocomplete("option", "change", eventOverride.call(child, originalChange));
                parent.autocomplete("option", "select", eventOverride.call(child, originalSelect));
            }

            deactivateChild.call(child);

            return parent;
        };

        $.cascadingAutocompletes = function (autocompletes) {
            for (var i = 0; i < autocompletes.length - 1; i++) {
                if (autocompletes[i]) {
                    $(autocompletes[i]).cascade(autocompletes[i + 1]);
                }
            }
        };
    })(jQuery);


    $(document).ready(function () {
        var pools = {};
        $("#SelectedPool").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Account/AutoCompletePool",
                    type: "POST",
                    dataType: "json",
                    data: { term: request.term },
                    success: function (data) {
                        response(data)
                    }
                })
            },
            select: function (event, ui) {
                $("#SelectedPoolId").val(ui.item.id);
            }
        });
    })

    $(document).ready(function () {
        $("#SelectedTeam").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Account/AutoCompleteTeam",
                    type: "POST",
                    dataType: "json",
                    data: { term: request.term, poolId: $("#SelectedPoolId").val() },
                    success: function (data) {
                        response(data)

                    }
                })
            },
            select: function (event, ui) {
                $("#SelectedTeamId").val(ui.item.id);
            }
        });
    })

    $(document).ready(function () {
        $.cascadingAutocompletes(["#SelectedPool","#SelectedTeam"]);
    })
</script>
<style>

    .ui-widget-content
    {
        border: 1px solid black;
        color: #222222;
        background-color: white;
    }
</style>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4>Create a new account.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Pool, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Pool, new { @class = "form-control", id = "SelectedPool" })
            @Html.HiddenFor(m => m.Pool, new { id = "SelectedPoolId" })
        </div>
    </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Team, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Team, new { @class = "form-control", id = "SelectedTeam" })
                @Html.HiddenFor(m => m.SelectedTeamId, new { id = "SelectedTeamId" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Register" />
            </div>
        </div>
}
<script>
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
