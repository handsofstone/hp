@model HP.Models.RosterViewModel

@{
    ViewBag.Title = "Roster";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript">
    function moveDualList(srcList, destList, moveAll) {

        var keepers = false;
        if (srcList.id == "roster") {
            var pText = srcList.options[srcList.selectedIndex].innerHTML;
            if (pText.indexOf("[K]") > -1) {
                keepers = true;
            }
        }

        // Do nothing if nothing is selected
        if ((srcList.selectedIndex == -1) && (moveAll == false)) {
            return;
        } else if (keepers) {
            return;
        } else {
            copySelected(srcList, destList);
            //sortSelect(destList);
        }
    }

    function deleteOption(object, index) {
        object.options[index] = null;
    }

    function addOption(object, text, value) {
        var defaultSelected = true;
        var selected = true;
        var optionName = new Option(text, value, defaultSelected, selected)
        object.options[object.length] = optionName;
    }

    function copySelected(fromObject, toObject) {
        for (var i = 0, l = fromObject.options.length; i < l; i++) {
            if (fromObject.options[i].selected)
                addOption(toObject, fromObject.options[i].text, fromObject.options[i].value);
        }
        for (var i = fromObject.options.length - 1; i > -1; i--) {
            if (fromObject.options[i].selected)
                deleteOption(fromObject, i);
        }
    }
    function populatePlayerIds() {
        playerIds = "";
        submittedPlayerIds = document.getElementById("roster");
        numberOfPlayers = submittedPlayerIds.length;
        var comma = '';
        for (var i = 0; i <= numberOfPlayers - 1; i++) {
            playerIds = playerIds + comma + submittedPlayerIds[i].value;
            comma = ',';
        }
        document.getElementById("playerIds").value = playerIds;
    }

    function selectAll() {

        objList = document.getElementById('roster');

        for (x = 0; x < objList.options.length; x++) {
            objList.options[x].selected = true;
        }

        document.getElementById('frmAddPlayers').submit();

    }

    $(document).ready(function () {
        //Dropdownlist Selectedchange event
        $("#SelectedIntervalId").change(function () {
            $('#IntervalRoster').empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetIntervalRoster")', // we are calling json method
                dataType: 'json',
                data: { id: $("#SelectedIntervalId").val() },
                success: function (teams) {
                    $.each(teams, function (i, team) {
                        $("#teams").append('<li><a href="/Team/Roster/'+team.Value+'">'+ team.Text + '</a></li>');
                    });
                },
            error: function (ex) {
                alert('Failed to retrieve states.' + ex);
            }
        });
        return false;
    })
    });

</script>
<div id="addPlayerModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            @using (Html.BeginForm("SaveRoster", "Team", FormMethod.Post, new { @class = "form-horizontal", role = "form", id="frmAddPlayers" }))
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Add Player(s)</h4>
                </div>
                <div class="modal-body">
                    <table celpadding=2 cellspacing=1 border=0 class="table">
                        <tr>
                            <td valign=top bgcolor=#f4f1e8 class="colorNote tableBody"><strong>SELECT PLAYERS</strong><br></td>
                            <td>&nbsp;</td>
                            <td valign=top align=left bgcolor=#f4f1e8 class="colorNote tableBody"><strong>TEAM ROSTER</strong><br /></td>
                        </tr>
                        <tr>
                            <td style="width:280px; height:310px;" valign=middle class="colorNote tableBody">
                                <input type=hidden id="backUsed" name="backUsed" value="1" defaultvalue="1"><input type="hidden" name="iCurrTeam" id="iCurrTeam" value="0" defaultvalue="0" />
                                @Html.DropDownListFor(model => model.RosterPlayers, Model.AvailablePlayers, new { @id = "availPlayers", @name = "availPlayers", @class = "select", @multiple = "multiple", @size = "25", @style = "width:250px;" })
                            </td>
                            <td style="vertical-align: middle">
                                <input type="button" name="btnRight" value=">>" onclick="moveDualList(document.getElementById('availPlayers'), document.getElementById('roster'), false);" class="select"><br /><br />
                                <input type="button" name="btnLeft" value="<<" onclick="moveDualList(document.getElementById('roster'), document.getElementById('availPlayers'), false);" class="select">
                            </td>
                            <td style="width:280px; height:310px;" valign=middle class="colorNote tableBody">
                                @Html.Hidden("teamId",Model.TeamId)                                
                                @Html.DropDownListFor(model => model.RosterPlayers, Model.RosterPlayers, new { @id = "roster", @name = "roster", @class = "select", @multiple = "multiple", @size = "25", @style = "width:250px;" })
                                @Html.Hidden("playerIds")                                
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-default" value="Save" onclick="populatePlayerIds();selectAll();" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

<div class="navbar navbar-default">
    <ul class="nav navbar-nav">
        <li class="navbar-form">
            <div class="form-group">
                @Html.DisplayNameFor(model=>model.SelectedIntervalId)                
            </div>
            <div class="form-group">
                @Html.DropDownListFor(model=>model.SelectedIntervalId, Model.Intervals,new { @class = "form-control" })
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-success" aria-label="Left Align">
                    <span class="glyphicon glyphicon-save" aria-hidden="true"></span> Submit
                </button>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-info" data-toggle="modal" data-target="#addPlayerModal" aria-label="Left Align">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add Player
                </button>
            </div>
        </li>
    </ul>
</div>
<div class="panel panel-default">
    <div class="panel-heading">Roster</div>

    <table class="table table-bordered" data-toggle="table" style="width:auto">
        <thead>
            <tr>
                <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Active)</td>
                <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Number)</td>
                <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Name)</td>
                <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Position)</td>
                <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Points)</td>
            </tr>
        </thead>
        <tbody>
            @foreach(HP.Models.PlayerInterval pi in Model.PlayerIntervals)
            { 
            <tr>
                <td>@Html.CheckBox("active",pi.Active,
                   new Dictionary<string, Object> {
                       { "data-toggle", "toggle" },
                       { "data-on", "Active" },
                       { "data-off", "Bench" }, 
                       { "data-size", "mini" } })
                </td>
                @{ var name = pi.Name;
                    var num = pi.Number.ToString();
                    var pts = pi.Points.ToString();}
                <td>@Html.DisplayFor(p=>num)</td>
                <td>@Html.DisplayFor(p=>name)</td>
                <td>@Html.DropDownListFor(p=>pi.Position,new SelectList(pi.EligiblePositions,pi.EligiblePositions.First()))                    
                </td>
                <td>@Html.DisplayFor(p=>pts)</td>
            </tr>
            }
        </tbody>
    </table>
</div>
