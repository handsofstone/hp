@model HP.Models.TeamViewModel

@{
    ViewBag.Title = "Team";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript">
    // Javascript for Add Players
    function moveDualList(srcList, destList, moveAll) {

        var keepers = false;
        if (srcList.id == "roster") {
            var pText = srcList.options[srcList.selectedIndex].innerHTML;
            if (pText.indexOf("[K]") > -1) {
                keepers = true;
            }
        }

        // Do nothing if nothing is selected
        if ((srcList.selectedIndex == -1) && (moveAll === false)) {
            return;
        } else if (keepers) {
            return;
        } else {
            copySelected(srcList, destList);
            //sortSelect(destList);
        }
    }

    function deleteOption(object, index) {
        object.options[index] = null;
    }

    function addOption(object, text, value) {
        var defaultSelected = true;
        var selected = true;
        var optionName = new Option(text, value, defaultSelected, selected);
        object.options[object.length] = optionName;
    }

    function copySelected(fromObject, toObject) {
        for (var i = 0, l = fromObject.options.length; i < l; i++) {
            if (fromObject.options[i].selected)
                addOption(toObject, fromObject.options[i].text, fromObject.options[i].value);
        }
        for (i = fromObject.options.length - 1; i > -1; i--) {
            if (fromObject.options[i].selected)
                deleteOption(fromObject, i);
        }
    }
    function populatePlayerIds() {
        playerIds = "";
        submittedPlayerIds = document.getElementById("roster");
        numberOfPlayers = submittedPlayerIds.length;
        var comma = '';
        for (var i = 0; i <= numberOfPlayers - 1; i++) {
            playerIds = playerIds + comma + submittedPlayerIds[i].value;
            comma = ',';
        }
        document.getElementById("playerIds").value = playerIds;
    }

    function selectAll() {

        objList = document.getElementById('roster');

        for (x = 0; x < objList.options.length; x++) {
            objList.options[x].selected = true;
        }

        document.getElementById('frmAddPlayers').submit();

    }

    function player(e) {
        this.active = $('.playerActive', e).is(':checked');
        this.lineupPlayerId = $('.lineupPlayerId', e).val();
        this.playerId = $('#playerId', e).val();
        this.position = $('.position', e).val();
    }

    function getPlayers(id) {
        return $(id + ' tbody tr').map(function (i, e) {
            return new player(e);
        });
    }

    function getModel(id) {
        this.IntervalId = $('#SelectedIntervalId').val();
        this.TeamId = $('#TeamId').val();
        this.Players = getPlayers(id).toArray();
    }


    function submitLineup() {
        $.ajax({
            contentType: 'application/json, charset=utf-8',
            type: 'POST',
            url: '@Url.Action("SubmitLineup")', // we are calling json method
            dataType: 'json',
            data: JSON.stringify({ model: new getModel('#lineupTable') }),
            success: function () {
                alert('success');
            },
            error: function (ex) {
                alert('Failed to retrieve states.' + ex);
            }
        });
    }

    function saveRoster() {

        $.ajax({
            contentType: 'application/json, charset=utf-8',
            type: 'POST',
            url: '@Url.Action("SaveRoster")', // we are calling json method
            dataType: 'json',
            data: JSON.stringify({ model: new getModel('#rosterTable') }),
            success: function () {
                alert('success');
            },
            error: function (ex) {
                alert('Failed to retrieve states.' + ex);
            }
        });
    }

    $(document).ready(function () {

        //Dropdownlist Selectedchange event
        $("#SelectedIntervalId").change(function () {
            $('#IntervalRoster').empty();
            $.ajax({
                type: 'GET',
                url: '@Url.Action("Lineup")', // we are calling json method
                dataType: 'html',
                data: { teamId: $('#TeamId').val(), intervalId: $("#SelectedIntervalId").val() },
                success: function (players) {
                    $('#lineup').empty();
                    $('#lineup').html(players)
                    $("input.playerActive").bootstrapToggle();
                    validateLineup();
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        });

        validateLineup();

        $("input.playerActive").change(function (event) {
            validateLineup();
        });
    });
    function validateLineup() {
        var lineupFormat = { C: 2, R: 2, L: 2, D: 4, G: 1 };
        var players = getPlayers('#lineupTable');

        $.each(lineupFormat, function (k, v) {
            var activeCount = $("#lineupTable .playerRow:has(:checked):has(td.position:contains(" + k + "))").length;
            var benchToggles = $("#lineupTable .playerRow:not(:has(:checked)):has(td.position:contains(" + k + ")) .playerActive");
            if (activeCount >= v)
                benchToggles.bootstrapToggle('disable')
            else
                benchToggles.bootstrapToggle('enable')
        });
    }

    function sortLineup() {

    }
</script>
<style>
    .panel.with-nav-tabs .panel-heading {
        padding: 5px 5px 0 5px;
    }

    .panel.with-nav-tabs .nav-tabs {
        border-bottom: none;
    }

    .panel.with-nav-tabs .nav-justified {
        margin-bottom: -1px;
    }

    /********************************************************************/
    /*** PANEL PRIMARY ***/
    .with-nav-tabs.panel-primary .nav-tabs > li > a,
    .with-nav-tabs.panel-primary .nav-tabs > li > a:hover,
    .with-nav-tabs.panel-primary .nav-tabs > li > a:focus {
        color: #fff;
    }

        .with-nav-tabs.panel-primary .nav-tabs > .open > a,
        .with-nav-tabs.panel-primary .nav-tabs > .open > a:hover,
        .with-nav-tabs.panel-primary .nav-tabs > .open > a:focus,
        .with-nav-tabs.panel-primary .nav-tabs > li > a:hover,
        .with-nav-tabs.panel-primary .nav-tabs > li > a:focus {
            color: #fff;
            background-color: #3071a9;
            border-color: transparent;
        }

    .with-nav-tabs.panel-primary .nav-tabs > li.active > a,
    .with-nav-tabs.panel-primary .nav-tabs > li.active > a:hover,
    .with-nav-tabs.panel-primary .nav-tabs > li.active > a:focus {
        color: #428bca;
        background-color: #fff;
        border-color: #428bca;
        border-bottom-color: transparent;
    }

    .with-nav-tabs.panel-primary .nav-tabs > li.dropdown .dropdown-menu {
        background-color: #428bca;
        border-color: #3071a9;
    }

        .with-nav-tabs.panel-primary .nav-tabs > li.dropdown .dropdown-menu > li > a {
            color: #fff;
        }

            .with-nav-tabs.panel-primary .nav-tabs > li.dropdown .dropdown-menu > li > a:hover,
            .with-nav-tabs.panel-primary .nav-tabs > li.dropdown .dropdown-menu > li > a:focus {
                background-color: #3071a9;
            }

        .with-nav-tabs.panel-primary .nav-tabs > li.dropdown .dropdown-menu > .active > a,
        .with-nav-tabs.panel-primary .nav-tabs > li.dropdown .dropdown-menu > .active > a:hover,
        .with-nav-tabs.panel-primary .nav-tabs > li.dropdown .dropdown-menu > .active > a:focus {
            background-color: #4a9fe9;
        }
</style>
<div id="addPlayerModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Add Players Modal content-->
        <div class="modal-content">
            @using (Html.BeginForm("AddPlayers", "Team", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "frmAddPlayers" }))
            {
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add Player(s)</h4>
            </div>
            <div class="modal-body">
                <table celpadding=2 cellspacing=1 border=0 class="table">
                    <tr>
                        <td valign=top bgcolor=#f4f1e8 class="colorNote tableBody"><strong>SELECT PLAYERS</strong><br></td>
                        <td>&nbsp;</td>
                        <td valign=top align=left bgcolor=#f4f1e8 class="colorNote tableBody"><strong>TEAM ROSTER</strong><br /></td>
                    </tr>
                    <tr>
                        <td style="width:280px; height:310px;" valign=middle class="colorNote tableBody">
                            <input type=hidden id="backUsed" name="backUsed" value="1" defaultvalue="1"><input type="hidden" name="iCurrTeam" id="iCurrTeam" value="0" defaultvalue="0" />
                            @Html.DropDownListFor(model => model.RosterPlayersToAdd, Model.AvailablePlayers, new { @id = "availPlayers", @name = "availPlayers", @class = "select", @multiple = "multiple", @size = "25", @style = "width:250px;" })
                        </td>
                        <td style="vertical-align: middle">
                            <input type="button" name="btnRight" value=">>" onclick="moveDualList(document.getElementById('availPlayers'), document.getElementById('roster'), false);" class="select"><br /><br />
                            <input type="button" name="btnLeft" value="<<" onclick="moveDualList(document.getElementById('roster'), document.getElementById('availPlayers'), false);" class="select">
                        </td>
                        <td style="width:280px; height:310px;" valign=middle class="colorNote tableBody">
                            @Html.Hidden("teamId", Model.TeamId)
                            @Html.DropDownListFor(model => model.RosterPlayersToAdd, Model.RosterPlayersToAdd, new { @id = "roster", @name = "roster", @class = "select", @multiple = "multiple", @size = "25", @style = "width:250px;" })
                            @Html.Hidden("playerIds")
                        </td>
                    </tr>
                </table>
            </div>
            <div class="modal-footer">
                <input type="submit" class="btn btn-default" value="Save" onclick="populatePlayerIds();selectAll();" />
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
            }
        </div>
    </div>
</div>
@using (Html.BeginForm("SubmitRoster", "Team", FormMethod.Post))
{
    @Html.HiddenFor(p => Model.TeamId, new { @id = "TeamId" })

    <div class="panel with-nav-tabs panel-primary">
        <div class="panel-heading">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#tabLineup" data-toggle="tab">Lineup</a></li>
                <li><a href="#tabRoster" data-toggle="tab">Roster</a></li>
            </ul>
        </div>
        <div class="panel-body">
            <div class="tab-content">
                <div class="tab-pane fade in active" id="tabLineup">

                    <div class="navbar navbar-default">
                        <ul class="nav navbar-nav">
                            <li class="navbar-form">
                                <div class="form-group">
                                    @Html.DisplayNameFor(model => model.SelectedIntervalId)
                                </div>
                                <div class="form-group">
                                    @Html.DropDownListFor(model => model.SelectedIntervalId, Model.Intervals, new { @class = "form-control" })
                                </div>
                                <div class="form-group">
                                <button type="button" class="btn btn-success" aria-label="Left Align" onclick="submitLineup()">
                                        <i class="glyphicon glyphicon-save" aria-hidden="true"></i> Submit
                                    </button>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="panel panel-default">
                        <div class="panel-heading">Lineup</div>
                        <table id="lineupTable" class="table table-bordered" data-toggle="table" style="width:auto">
                            <thead>
                                <tr>
                                    <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Active)</td>
                                    <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Number)</td>
                                    <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Name)</td>
                                    <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Position)</td>
                                    <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Team)</td>
                                    <td>@Html.DisplayNameFor(model => model.PlayerIntervals.FirstOrDefault().Points)</td>
                                </tr>
                            </thead>
                            <tbody id="lineup">
                                @{
                                    Html.RenderAction("Lineup", new { teamId = Model.TeamId, intervalId = Model.SelectedIntervalId });
                                }                                
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="tab-pane fade" id="tabRoster">
                    <div class="navbar navbar-default">
                        <ul class="nav navbar-nav">
                            <li class="navbar-form">
                                <div class="form-group">
                                    <button type="button" class="btn btn-success" aria-label="Left Align" onclick="saveRoster()">
                                        <i class="glyphicon glyphicon-save" aria-hidden="true"></i> Save
                                    </button>
                                </div>
                                <div class="form-group">
                                    <button type="button" class="btn btn-info" data-toggle="modal" data-target="#addPlayerModal" aria-label="Left Align">
                                        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add Player
                                    </button>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="panel panel-default">
                        <div class="panel-heading">Roster</div>
                        <table id="rosterTable" class="table table-bordered" data-toggle="table" style="width:auto">
                            <thead>
                                <tr>
                                    <td>@Html.DisplayNameFor(model => model.RosterPlayers.FirstOrDefault().Number)</td>
                                    <td>@Html.DisplayNameFor(model => model.RosterPlayers.FirstOrDefault().Name)</td>
                                    <td>@Html.DisplayNameFor(model => model.RosterPlayers.FirstOrDefault().EligiblePositions)</td>
                                    <td>@Html.DisplayNameFor(model => model.RosterPlayers.FirstOrDefault().Team)</td>
                                    <td>@Html.DisplayNameFor(model => model.RosterPlayers.FirstOrDefault().Points)</td>
                                </tr>
                            </thead>
                            <tbody id="lineup">
                                @foreach (HP.Models.PlayerInterval pi in Model.RosterPlayers)
                                {
                                    var playerId = pi.PlayerId;
                                    var name = pi.Name;
                                    var num = pi.Number.ToString();
                                    var pts = pi.Points.ToString();
                                    var position = pi.Position.First();
                                    <tr>
                                        <td>@Html.DisplayFor(p => num)</td>
                                        <td>
                                            @Html.DisplayFor(p => name)
                                            @Html.HiddenFor(p => playerId)
                                        </td>
                                        <td>
                                            @Html.DropDownListFor(p => position, new SelectList(pi.EligiblePositions, position))
                                        </td>
                                        <td>@Html.DisplayFor(p => pi.Team)</td>
                                        <td>@Html.DisplayFor(p => pts)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
                                    }